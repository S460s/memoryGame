{"version":3,"sources":["components/Card.js","components/Header.js","helperFunctions.js","App.js","index.js"],"names":["Card","props","className","onClick","e","container","target","parentElement","handleClick","id","element","url","classList","add","console","log","Header","moves","bestScore","shuffle","array","i","copy","doubledArray","arr","forEach","item","push","doubleArray","n","length","Math","floor","random","App","cards","useRef","firstCard","secondCard","flipedPairs","useState","setMoves","cardComponents","setCardComponents","playAgain","setPlayAgain","setBestScore","gameOver","setGameOver","imgUrls","card","value","current","prevState","setTimeout","remove","prevMoves","useEffect","map","uniqid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3b31aa8.chunk.js","sourcesContent":["import '../styles/card.css';\nconst Card = (props) => {\n\tconst handleClick = (e) => {\n\t\tlet container = e.target.parentElement.parentElement;\n\t\tif (\n\t\t\tprops.handleClick({\n\t\t\t\tid: props.id,\n\t\t\t\telement: container,\n\t\t\t\turl: props.url,\n\t\t\t})\n\t\t) {\n\t\t\tcontainer.classList.add('flip');\n\t\t} else {\n\t\t\tconsole.log('Already selected');\n\t\t}\n\t};\n\treturn (\n\t\t<div className={`flip-card-container`} onClick={handleClick}>\n\t\t\t<div className='flip-card'>\n\t\t\t\t<div className='flip-card-front'>Front</div>\n\t\t\t\t<div className='flip-card-back'>\n\t\t\t\t\t<p>{props.url}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import '../styles/header.css';\n\nconst Header = (props) => {\n\treturn (\n\t\t<header>\n\t\t\t<h1 className='title'>Memory Game</h1>\n\t\t\t<div className='scoreboard'>\n\t\t\t\t<p>Moves: {props.moves}</p>\n\t\t\t\t<p>High Score: {props.bestScore}</p>\n\t\t\t</div>\n\t\t</header>\n\t);\n};\n\nexport default Header;\n","function doubleArray(arr) {\n\tlet copy = [];\n\tarr.forEach((item) => {\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\tcopy.push(item);\n\t\t}\n\t});\n\treturn copy;\n}\n\nfunction shuffle(array) {\n\tlet copy = [];\n\tlet doubledArray = doubleArray(array);\n\tlet n = doubledArray.length;\n\tlet i;\n\twhile (n) {\n\t\ti = Math.floor(Math.random() * doubledArray.length);\n\t\tif (i in doubledArray) {\n\t\t\tcopy.push(doubledArray[i]);\n\t\t\tdelete doubledArray[i];\n\t\t\tn--;\n\t\t}\n\t}\n\n\treturn copy;\n}\n\nexport default shuffle;\n","import Card from './components/Card';\nimport Header from './components/Header';\nimport shuffle from './helperFunctions';\nimport uniqid from 'uniqid';\nimport './styles/app.css';\nimport { useEffect, useRef, useState } from 'react';\nfunction App() {\n\tlet cards = useRef({ firstCard: null, secondCard: null, flipedPairs: 0 });\n\n\tconst [moves, setMoves] = useState(0);\n\tconst [cardComponents, setCardComponents] = useState([]);\n\tconst [playAgain, setPlayAgain] = useState(true);\n\tconst [bestScore, setBestScore] = useState(null);\n\tconst [gameOver, setGameOver] = useState(false);\n\tlet imgUrls = useRef(['1', '2']);\n\n\tconst handleClick = (card) => {\n\t\tif (card.element.classList.value === 'flip-card-container') {\n\t\t\tif (!cards.current.firstCard) {\n\t\t\t\tcards.current.firstCard = card;\n\t\t\t\treturn true;\n\t\t\t} else if (!cards.current.secondCard) {\n\t\t\t\tcards.current.secondCard = card;\n\t\t\t\tif (cards.current.firstCard.url === cards.current.secondCard.url) {\n\t\t\t\t\tcards.current.firstCard = null;\n\t\t\t\t\tcards.current.secondCard = null;\n\t\t\t\t\tcards.current.flipedPairs += 1;\n\t\t\t\t\tconsole.log(cards.current.flipedPairs);\n\t\t\t\t\tconsole.log(imgUrls.current.length);\n\t\t\t\t\tif (cards.current.flipedPairs === imgUrls.current.length) {\n\t\t\t\t\t\tcards.current.flipedPairs = 0;\n\t\t\t\t\t\tconsole.log('GG');\n\t\t\t\t\t\tsetGameOver((prevState) => !prevState);\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(moves);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tcards.current.firstCard.element.classList.remove('flip');\n\t\t\t\t\t\tcards.current.secondCard.element.classList.remove('flip');\n\t\t\t\t\t\tcards.current.firstCard = null;\n\t\t\t\t\t\tcards.current.secondCard = null;\n\t\t\t\t\t}, 1000);\n\t\t\t\t}\n\t\t\t\tsetMoves((prevMoves) => prevMoves + 1);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\tuseEffect(() => {\n\t\tsetCardComponents(() => {\n\t\t\tlet components = shuffle(imgUrls.current).map((url) => {\n\t\t\t\tlet id = uniqid();\n\t\t\t\treturn <Card url={url} key={id} id={id} handleClick={handleClick} />;\n\t\t\t});\n\t\t\treturn components;\n\t\t});\n\t}, [playAgain]);\n\n\tuseEffect(() => {\n\t\tif (!bestScore || bestScore > moves) {\n\t\t\tsetBestScore(moves);\n\t\t} else {\n\t\t\tsetBestScore(bestScore);\n\t\t}\n\t\tsetMoves(0);\n\t}, [gameOver]);\n\n\tconsole.log(moves + ' moves!!!');\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Header moves={moves} bestScore={bestScore} />\n\t\t\t<div className='gameboard'>{cardComponents}</div>\n\t\t\t<button\n\t\t\t\tclassName='playAgainBtn'\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetPlayAgain((prevState) => !prevState);\n\t\t\t\t}}>\n\t\t\t\tPlay Again\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}